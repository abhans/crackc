name: CrackC Build and Test
# This workflow builds and tests the CrackC project using different compilers and operating systems.

on:
  push:
    branches: [ "main", "crackc_actions" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc]
        cpp_compiler: [g++]

    steps:
    # Checkout repo
    - uses: actions/checkout@v4

    - name: Install build tools for vcpkg
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y autoconf automake libtool pkg-config m4 build-essential


    # Install vcpkg and OpenCV (with Aruco)
    - name: Install OpenCV (with vcpkg)
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        ./vcpkg/bootstrap-vcpkg.sh
        ./vcpkg/vcpkg install opencv4[contrib] --triplet x64-linux

    # Set build output directory
    - name: Set build output directory
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Configure CMake with vcpkg toolchain
    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S ${{ github.workspace }}

    # Build the project
    - name: Build project
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    # Run tests (if any)
    - name: Run tests
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}